<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="A web interface for MQTT">
    <meta name="author" content="Fabian Affolter">

    <title>Lab conditions</title>

    <!-- Bootstrap core CSS -->
    <link href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- jQuery -->
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
    <!-- Sparkline -->
    <script type="text/javascript" src="javascripts/jquery.sparkline.min.js"></script>
    <!-- jgPlot -->
    <link class="include" rel="stylesheet" type="text/css" href="stylesheets/jquery.jqplot.min.css" />
    <script type="text/javascript" src="javascripts/jquery.jqplot.min.js"></script>
    <script type="text/javascript" src="javascripts/jqplot.canvasTextRenderer.min.js"></script>
    <script type="text/javascript" src="javascripts/jqplot.canvasAxisLabelRenderer.min.js"></script>
    <script type="text/javascript" src="javascripts/jqplot.dateAxisRenderer.min.js"></script>

    <script src="/socket.io/socket.io.js"></script>

    <!-- socket.io for communication -->
    <script type="text/javascript">
        var labTemp = new Array();
        var headCount = new Array();
		var socket = io.connect();
        //var socket = io.connect('http://localhost:5000');
            socket.on('connect', function () {
                socket.on('mqtt', function (msg) {
                    var message = msg.topic.split('/');
                    var area = message[1];

                    console.log(String.fromCharCode.apply(null, new Uint8Array(msg.payload)));

                    var payload = String.fromCharCode.apply(null, new Uint8Array(msg.payload));

                    var timestamp = Math.round((new Date()).getTime() / 1000);

                    $('#topic').html(msg.topic);
                    $('#message').html(msg.topic + ', ' + payload);
                    switch (area) {
                        case 'front':
                            $('#value1').html('(Switch value: ' + payload + ')');
                            if (payload == 'true') {
                                $('#label1').text('Closed');
                                $('#label1').removeClass('label-danger').addClass('label-success');
                            } else {
                                $('#label1').text('Open');
                                $('#label1').removeClass('label-success').addClass('label-danger');
                            }
                            break;

                        case 'pir':
                            $('#value2').html('(Sense value: ' + payload + ')');
                            if (payload == '0') {
                                $('#label2').text('Nothing');
                                $('#label2').removeClass('label-danger').addClass('label-success');
                            } else {
                                $('#label2').text('Motion detected');
                                $('#label2').removeClass('label-success').addClass('label-danger');
                            }
                            break;

                        case 'headCount':
                            $('#value3').html('(Head count: ' + payload + ')');
                            $('#value3Label').text(payload + ' person');
                            $('#value3Label').removeClass('').addClass('label-success');

                            var entry = new Array();
                            entry.push(timestamp);
                            entry.push(parseInt(payload));
                            headCount.push(entry);
                            // Show only 20 values
                            if (headCount.length >= 20) {
                                headCount.shift()
                            }

                            var headCountPlot = $.jqplot ('headCountChart', [headCount], {
                                axesDefaults: {
                                    labelRenderer: $.jqplot.CanvasAxisLabelRenderer,
                                    tickOptions: {
                                        showMark: false,
                                        showGridline: false,
                                        show: false,
                                        showLabel: false,
                                    }
                                  },
                                grid: {
                                    gridLineColor: '#FFFFFF',
                                    borderWidth: 0,
                                    shadow: false,
                                },
                                seriesDefaults: {
                                    rendererOptions: {
                                        smooth: true
                                    },
                                    showMarker: false,
                                    lineWidth: 2,
                                  },
                                  axes: {
                                    xaxis: {
                                      renderer:$.jqplot.DateAxisRenderer,
                                      tickOptions:{
                                        formatString:'%T'
                                      },
                                      pad: 0
                                    },
                                    yaxis: {
                                    }
                                }
                            });
                            break;


                        case 'labTemp':
                            $('#labTempSensor').html('(Sensor value: ' + payload + ')');
                            $('#labTempLabel').text(payload + '°C');
                            $('#labTempLabel').removeClass('').addClass('label-default');

                            var entry = new Array();
                            entry.push(timestamp);
                            entry.push(parseFloat(payload));
                            labTemp.push(entry);
                            // Show only 20 values
                            if (labTemp.length >= 20) {
                                labTemp.shift()
                            }

                            var labTempPlot = $.jqplot ('labTempChart', [labTemp], {
                                axesDefaults: {
                                    labelRenderer: $.jqplot.CanvasAxisLabelRenderer,
                                    tickOptions: {
                                        showMark: false,
                                        showGridline: false,
                                        show: false,
                                        showLabel: false,
                                    }
                                  },
                                grid: {
                                    gridLineColor: '#FFFFFF',
                                    borderWidth: 0,
                                    shadow: false,
                                },
                                seriesDefaults: {
                                    rendererOptions: {
                                        smooth: true
                                    },
                                    showMarker: false,
                                    lineWidth: 2,
                                  },
                                  axes: {
                                    xaxis: {
                                      renderer:$.jqplot.DateAxisRenderer,
                                      tickOptions:{
                                        formatString:'%T'
                                      },
                                      pad: 0
                                    },
                                    yaxis: {
                                        tickOptions:{
                                            formatString: '%.1f'
                                        }
                                    }
                                }
                            });

                            break;
                        case 'basement':
                            $('#basementTempSensor').html('(Sensor value: ' + payload + ')');

                            if (payload >= 25) {
                                    $('#basementTempLabel').text(payload + '°C - too hot');
                                    $('#basementTempLabel').removeClass('label-warning label-success label-info label-primary').addClass('label-danger');
                            } else if (payload >= 21) {
                                    $('#basementTempLabel').text(payload + '°C - hot');
                                    $('#basementTempLabel').removeClass('label-danger label-success label-info label-primary').addClass('label-warning');
                            } else if (payload >= 18) {
                                    $('#basementTempLabel').text(payload + '°C - normal');
                                    $('#basementTempLabel').removeClass('label-danger label-warning label-info label-primary').addClass('label-success');
                            } else if (payload >= 15) {
                                    $('#basementTempLabel').text(payload + '°C - low');
                                    $('#basementTempLabel').removeClass('label-danger label-warning label-success label-primary').addClass('label-info');
                            } else if (payload <= 12) {
                                    $('#basementTempLabel').text(payload + '°C - too low');
                                    $('#basementTempLabel').removeClass('label-danger label-warning label-success label-info').addClass('label-primary');
                            basementTemp.push(parseInt(payload));
                            if (basementTemp.length >= 20) {
                                basementTemp.shift()
                            }

                            $('.basementTempSparkline').sparkline(basementTemp, {
                                type: 'line',
                                width: '160',
                                height: '40'});
                            }
                            break;
                        default: console.log('Error: Data do not match the MQTT topic.'); break;
                    }
         });
         socket.emit('subscribe', {topic : 'home/#'});
        });
    </script>

  </head>

  <body>
    <div id="wrap">
      <div class="container">
        <div class="page-header"><h1><b>Lab conditions</b></h1></div>

            <div class="panel panel-default">
              <div class="panel-body">
                    <table class="table table-striped">
                        <!-- Entrace door
                        <tr>
                        <td width="40%" style="vertical-align:middle;"><h3>Entrance</h3><small id="value1">(no value recieved)</small></td>
                        <td style="vertical-align:middle;"></td>
                        <td width="30%" style="vertical-align:middle;"><h4>&nbsp;<span id="label1" class="label">Unknown</span></h4></td>
                        </tr>-->


                        <!-- Back door -->
                        <tr>
                        <td width="40%" style="vertical-align:middle;"><h3>PIR Motion Sensor</h3><small id="value2">(no value recieved)</small></td>
                        <td style="vertical-align:middle;"></td>
                        <td width="30%" style="vertical-align:middle;"><h4>&nbsp;<span id="label2" class="label">Unknown</span></h4></td>
                        </tr>


                        <!-- Head Count -->
                        <tr>
                        <td width="40%" style="vertical-align:middle;"><h3>Head Count</h3><small id="value3">(no value recieved)</small></td>
                        <td style="vertical-align:middle;"><div id="headCountChart" style="height:80px; width:300px;"></div></td>
                        <td width="30%" style="vertical-align:middle;"><h4>&nbsp;<span id="value3Label" class="label">Unknown</span></h4></td>
                        </tr>


                        <!-- Lab temperature -->
                        <tr>
                        <td width="40%" style="vertical-align:middle;"><h3>Temperature</h3><small id="labTempSensor">(no value recieved)</small></td>
                        <td style="vertical-align:middle;"><div id="labTempChart" style="height:80px; width:300px;"></div></td>
                        <td width="30%" style="vertical-align:middle;"><h4>&nbsp;<span id="labTempLabel" class="label">Unknown</span></h4></td>
                        </tr>


                        <!-- Basement temperature
                        <tr>
                        <td width="40%" style="vertical-align:middle;"><h3>Basement temperature</h3><small id="basementTempSensor">(no value recieved)</small></td>
                        <td style="vertical-align:middle;"><span class="basementTempSparkline"></span></td>
                        <td width="30%" style="vertical-align:middle;"><h4>&nbsp;<span id="basementTempLabel" class="label">Unknown</span></h4></td>
                        </tr>-->
                    </table>
              </div>
            </div>
          <div class="panel panel-default">
            <div class="panel-body">
                    <b>Latest MQTT message:  </b> <small id="message">no message recieved</small>
            </div>
          </div>

        <div class="footer">
    </div>
  </body>
</html>
